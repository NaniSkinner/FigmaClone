rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection - users can read all, but only write their own
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Presence collection - for real-time cursor tracking and selection
    // Users can read all presence data but only write their own
    match /presence/{userId} {
      allow read: if isAuthenticated();
      allow delete: if isOwner(userId);

      // Allow create with full validation
      allow create: if isOwner(userId)
        && request.resource.data.keys().hasAll(['userId', 'lastSeen', 'cursor'])
        && request.resource.data.cursor.keys().hasAll(['x', 'y'])
        && request.resource.data.cursor.x is number
        && request.resource.data.cursor.y is number;

      // Allow update with partial data (for cursor position and selection updates)
      allow update: if isOwner(userId)
        && (!request.resource.data.keys().hasAny(['cursor']) ||
            (request.resource.data.cursor.keys().hasAll(['x', 'y'])
             && request.resource.data.cursor.x is number
             && request.resource.data.cursor.y is number))
        && (!request.resource.data.keys().hasAny(['selectedObjectIds']) ||
            request.resource.data.selectedObjectIds is list);
    }

    // Canvas collections - collaborative canvas objects
    // Any authenticated user can read/write canvas objects
    match /canvas/{canvasId}/objects/{objectId} {
      allow read: if isAuthenticated();
      allow write, delete: if isAuthenticated();

      // Validate object data structure for creates/updates
      allow create, update: if isAuthenticated()
        && request.resource.data.keys().hasAll(['id', 'type', 'x', 'y'])
        && request.resource.data.id is string
        && request.resource.data.type is string
        && request.resource.data.x is number
        && request.resource.data.y is number;
    }
  }
}
